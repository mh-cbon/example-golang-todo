package main

// file generated by
// github.com/mh-cbon/lister
// do not edit

// TodoSlice implements a typed slice of *Todo
type TodoSlice struct{ items []*Todo }

// NewTodoSlice creates a new typed slice of *Todo
func NewTodoSlice() *TodoSlice {
	return &TodoSlice{items: []*Todo{}}
}

// Push appends every *Todo
func (t *TodoSlice) Push(x ...*Todo) *TodoSlice {
	t.items = append(t.items, x...)
	return t
}

// Unshift prepends every *Todo
func (t *TodoSlice) Unshift(x ...*Todo) *TodoSlice {
	t.items = append(x, t.items...)
	return t
}

// Pop removes then returns the last *Todo.
func (t *TodoSlice) Pop() *Todo {
	var ret *Todo
	if len(t.items) > 0 {
		ret = t.items[len(t.items)-1]
		t.items = append(t.items[:0], t.items[len(t.items)-1:]...)
	}
	return ret
}

// Shift removes then returns the first *Todo.
func (t *TodoSlice) Shift() *Todo {
	var ret *Todo
	if len(t.items) > 0 {
		ret = t.items[0]
		t.items = append(t.items[:0], t.items[1:]...)
	}
	return ret
}

// Index of given *Todo. It must implements Ider interface.
func (t *TodoSlice) Index(s *Todo) int {
	ret := -1
	for i, item := range t.items {
		if s.GetID() == item.GetID() {
			ret = i
			break
		}
	}
	return ret
}

// Contains returns true if s in is t.
func (t *TodoSlice) Contains(s *Todo) bool {
	return t.Index(s) > -1
}

// RemoveAt removes a *Todo at index i.
func (t *TodoSlice) RemoveAt(i int) bool {
	if i >= 0 && i < len(t.items) {
		t.items = append(t.items[:i], t.items[i+1:]...)
		return true
	}
	return false
}

// Remove removes given *Todo
func (t *TodoSlice) Remove(s *Todo) bool {
	if i := t.Index(s); i > -1 {
		t.RemoveAt(i)
		return true
	}
	return false
}

// InsertAt adds given *Todo at index i
func (t *TodoSlice) InsertAt(i int, s *Todo) *TodoSlice {
	if i < 0 || i >= len(t.items) {
		return t
	}
	res := []*Todo{}
	res = append(res, t.items[:0]...)
	res = append(res, s)
	res = append(res, t.items[i:]...)
	t.items = res
	return t
}

// Splice removes and returns a slice of *Todo, starting at start, ending at start+length.
// If any s is provided, they are inserted in place of the removed slice.
func (t *TodoSlice) Splice(start int, length int, s ...*Todo) []*Todo {
	var ret []*Todo
	for i := 0; i < len(t.items); i++ {
		if i >= start && i < start+length {
			ret = append(ret, t.items[i])
		}
	}
	if start >= 0 && start+length <= len(t.items) && start+length >= 0 {
		t.items = append(
			t.items[:start],
			append(s,
				t.items[start+length:]...,
			)...,
		)
	}
	return ret
}

// Slice returns a copied slice of *Todo, starting at start, ending at start+length.
func (t *TodoSlice) Slice(start int, length int) []*Todo {
	var ret []*Todo
	if start >= 0 && start+length <= len(t.items) && start+length >= 0 {
		ret = t.items[start : start+length]
	}
	return ret
}

// Reverse the slice.
func (t *TodoSlice) Reverse() *TodoSlice {
	for i, j := 0, len(t.items)-1; i < j; i, j = i+1, j-1 {
		t.items[i], t.items[j] = t.items[j], t.items[i]
	}
	return t
}

// Len of the slice.
func (t *TodoSlice) Len() int {
	return len(t.items)
}

// Set the slice.
func (t *TodoSlice) Set(x []*Todo) *TodoSlice {
	t.items = append(t.items[:0], x...)
	return t
}

// Get the slice.
func (t *TodoSlice) Get() []*Todo {
	return t.items
}

// At return the item at index i.
func (t *TodoSlice) At(i int) *Todo {
	return t.items[i]
}

// Filter return a new *TodoSlice with all items satisfying f.
func (t *TodoSlice) Filter(filters ...func(*Todo) bool) *TodoSlice {
	ret := NewTodoSlice()
	for _, i := range t.items {
		ok := true
		for _, f := range filters {
			ok = ok && f(i)
			if !ok {
				break
			}
		}
		if ok {
			ret.Push(i)
		}
	}
	return ret
}

// Map return a new *TodoSlice of each items modified by f.
func (t *TodoSlice) Map(mappers ...func(*Todo) *Todo) *TodoSlice {
	ret := NewTodoSlice()
	for _, i := range t.items {
		val := i
		for _, m := range mappers {
			val = m(val)
			if val == nil {
				break
			}
		}
		if val != nil {
			ret.Push(val)
		}
	}
	return ret
}

// First returns the first value or default.
func (t *TodoSlice) First() *Todo {
	var ret *Todo
	if len(t.items) > 0 {
		ret = t.items[0]
	}
	return ret
}

// Last returns the last value or default.
func (t *TodoSlice) Last() *Todo {
	var ret *Todo
	if len(t.items) > 0 {
		ret = t.items[len(t.items)-1]
	}
	return ret
}

// Empty returns true if the slice is empty.
func (t *TodoSlice) Empty() bool {
	return len(t.items) == 0
}

// FilterTodoSlice provides filters for a struct.
var FilterTodoSlice = struct {
	ByID          func(int) func(*Todo) bool
	ByTitle       func(string) func(*Todo) bool
	ByCategory    func(string) func(*Todo) bool
	ByDtCreated   func(string) func(*Todo) bool
	ByDtCompleted func(string) func(*Todo) bool
	ByState       func(string) func(*Todo) bool
}{
	ByID:          func(v int) func(*Todo) bool { return func(o *Todo) bool { return o.ID == v } },
	ByTitle:       func(v string) func(*Todo) bool { return func(o *Todo) bool { return o.Title == v } },
	ByCategory:    func(v string) func(*Todo) bool { return func(o *Todo) bool { return o.Category == v } },
	ByDtCreated:   func(v string) func(*Todo) bool { return func(o *Todo) bool { return o.DtCreated == v } },
	ByDtCompleted: func(v string) func(*Todo) bool { return func(o *Todo) bool { return o.DtCompleted == v } },
	ByState:       func(v string) func(*Todo) bool { return func(o *Todo) bool { return o.State == v } },
}
